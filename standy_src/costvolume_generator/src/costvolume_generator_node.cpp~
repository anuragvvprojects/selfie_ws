#include "ros/ros.h"

#include <opencv2/opencv.hpp>
#include<opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include<opencv2/highgui/highgui.hpp>

#include<cstdio>
#include<iostream>
#include<cmath>
#include<vector_types.h>
#include <sstream>
#include<fstream>

//#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <poseimagearraymsg/poseImageArray.h>


using namespace std;
using namespace cv;


std::deque<Mat> cost_vol_images;
std::deque<geometry_msgs::PoseStamped> cost_vol_poses;
extern void function(Mat& Ir,Mat& Im,Mat& R,Mat& T,Mat& Nv,Mat& K,Mat& Ki,Mat& confMat, Mat &borderFlag, Mat &IrEstDepth, int height, int width,int order,float dMin,float stepSz, int nDepth);

void convertQuat2Rot(vector<float> q, Mat &R, Mat &T, Mat &P, Mat &P_inv){
	float sum=0.0;
	for(int i=0;i<4;i++){
		sum=sum+q[i]*q[i];
	}
	//cout<<sum<<endl;
	sum=1.0;//sqrt(sum);
    float w = q[1]/sum;
    float x = q[2]/sum;
    float y = q[3]/sum;
    float z = q[0]/sum;
    R.at<float>(0,0) = 1 - 2*y*y - 2*z*z;
    R.at<float>(0,1) = 2*x*y - 2*w*z;
    R.at<float>(0,2) = 2*x*z + 2*w*y;
    R.at<float>(1,0) = 2*x*y + 2*w*z;
    R.at<float>(1,1) = 1 - 2*x*x - 2*z*z;
    R.at<float>(1,2) = 2*y*z - 2*w*x;
    R.at<float>(2,0) = 2*x*z - 2*w*y;
    R.at<float>(2,1) = 2*y*z + 2*w*x;
    R.at<float>(2,2) = 1 - 2*x*x - 2*y*y;
    
	T.at<float>(0) = q[4];
    T.at<float>(1) = q[5];
    T.at<float>(2) = q[6];

//	R = -1 * R;   
// 	T = -1 * T;
    for(size_t i=0;i<3;i++){
        for(size_t j=0;j<3;j++)
            P.at<float>(i,j) = R.at<float>(i,j);
        P.at<float>(i,3) = T.at<float>(i);
    }
    P.at<float>(3,3) = 1.0;
    P_inv = P.inv();
}


void bundle_callback(const poseimagearraymsg::poseImageArrayConstPtr msg)
{
//--------copied from cost_vol_node
    
    bool DEBUG = 1;
    //cv::namedWindow("cost_vol_batch");
    for(int i = 0 ; i < msg->imageArray.size() ; i++)
    {
        cv_bridge::CvImagePtr cv_ptr;
        cv_ptr = cv_bridge::toCvCopy(msg->imageArray.at(i), sensor_msgs::image_encodings::BGR8);
        if(DEBUG){imshow("cost_vol_batch",cv_ptr->image);waitKey(3);}
		
        cost_vol_images.push_back(cv_ptr->image);
        cost_vol_poses.push_back(msg->poseArray.at(i));
    }
//-------------------------------------
		int i = 1;	
				// ------- code from arnab
			    	    Mat R_ref = Mat::zeros(3,3,CV_32FC1), R_nei = R_ref.clone();
				    Mat T_ref = Mat::zeros(3,1,CV_32FC1), T_nei = T_ref.clone();
				    Mat P_ref = Mat::zeros(4,4,CV_32FC1), P_nei = P_ref.clone();
				    Mat P_ref_inv, P_nei_inv;
				    vector<float> IrProj, ImProj;
				    
				    Eigen::Affine3d R_ref				    



				    convertQuat2Rot(IrProj,R_ref,T_ref,P_ref,P_ref_inv);
				    convertQuat2Rot(ImProj,R_nei,T_nei,P_nei,P_nei_inv);
				//	cout<<P_ref<<endl;
				//	readProjectionmat(P_ref,"1.txt",P_ref_inv);
				//	readProjectionmat(P_nei,"2.txt",P_nei_inv);
					Mat K = Mat::zeros(3,3,CV_32FC1);
				    K.at<float>(0,0) = 481.2;
				    K.at<float>(0,2) = 319.5;
				    K.at<float>(1,1) = -480.0;
				    K.at<float>(1,2) = 239.5;
				    K.at<float>(2,2) = 1.0;
				    Mat Ki = K.inv();

				    Mat P_r2m = P_nei * P_ref_inv;
				  //cout<<P_r2m<<endl; 
				    
				    Mat Ir = cost_vol_images[0].clone();
				    Ir.convertTo(Ir,CV_32F);
				//    Ir = Ir/255.0;
				    Mat Im = cost_vol_images[cost_vol_images.size() - 1].clone();
				    Im.convertTo(Im,CV_32F);
				//    Im = Im/255.0;
				    #if 0
				    imshow("Reference Image",Ir);
				    imshow("Neighborhood Image",Im);
				    waitKey(0);
				    #endif
				    
				    Mat R = Mat::zeros(3,3,CV_32FC1);
				    Mat T = Mat::zeros(3,1,CV_32FC1);
				    Mat Nv = Mat::zeros(1,3,CV_32FC1);
				    for(size_t i=0;i<3;i++){
					for(size_t j=0;j<3;j++)
					    R.at<float>(i,j) = P_r2m.at<float>(i,j);
					T.at<float>(i) = P_r2m.at<float>(i,3);
				    }
				    Nv.at<float>(0,2) = 1.0;
					//cout<<Nv<<endl; 
				    int height = Ir.rows, width = Ir.cols;
				    Mat entropyMat = Mat::zeros(Ir.size(),CV_32FC1);
				    Mat borderMat = Mat::zeros(Ir.size(), CV_8UC1);

					//char IrDepthfile[100];
					//Mat IrDepth=Mat::zeros(height,width,CV_32FC1);
					//sprintf(IrDepthfile, "../test_data/depthmaps/scene_%03d.depth", atoi(argv[1]));
					//readDepthfile(IrDepth,IrDepthfile);
				    
				    int order = 2;
				    float dmin = 0.001;
				    float stepSz = 0.10;
				    int nDepth = 128;
				    Mat IrEstDepth=Mat::zeros(height, width, CV_32FC1);
				    function(Ir,Im,R,T,Nv,K,Ki,entropyMat,borderMat,IrEstDepth,height,width,order,dmin,stepSz,nDepth);
	

}

int main(int argc, char* argv[]){

//---- copied from dfusmc_node---------------
  bool DEBUG = 0;
  ros::init(argc, argv, "dfusmc_node");
  ros::NodeHandle n;
  //pub = n.advertise< sensor_msgs::PointCloud2 > ("/cost_vol_cloud", 1);
  ros::Subscriber sub = n.subscribe("/poseimagebundle",1,bundle_callback);

//   ros::spin();
//-------------------------------------------

	
}
