#include <opencv2/opencv.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<cstdio>
#include<iostream>
#include<cmath>
#include<algorithm>
#include<vector_types.h>
#include <cuda_runtime_api.h>
#include<cuda_runtime.h>
#include <cuda.h>
#include <device_launch_parameters.h>
#include <device_functions.h>
#include <iostream>
#include <algorithm>
using namespace cv;
using namespace std;

static inline void _safe_cuda_call(cudaError err, const char* msg, const char* file_name, const int line_number)
{
	if(err!=cudaSuccess)
	{
		fprintf(stderr,"%s\n\nFile: %s\n\nLine Number: %d\n\nReason: %s\n",msg,file_name,line_number,cudaGetErrorString(err));
		std::cin.get();
		exit(EXIT_FAILURE);
	}
}

#define SAFE_CALL(call,msg) _safe_cuda_call((call),(msg),__FILE__,__LINE__)

texture<float, 2, cudaReadModeElementType> tex_Im;


__global__ void costVolume( float *dIr, int *dBorderFlag, float *dCost, float *dConf,float *dest ,float *P,float *B,int height,int width, int maxOrd, int nDepth)
{
  	const int xIndex = blockIdx.x * blockDim.x + threadIdx.x;
  	const int yIndex = blockIdx.y * blockDim.y + threadIdx.y;
	int idx=yIndex*width+xIndex;
	float qmin = 0.001, qmax = 10.001;

	float maxRange=0.0;

	float step = qmax/(nDepth) ;
	dConf[idx]=0.0;
	dest[idx]=0.0;
	
	int order = 1;

	float dSum = 0.0;
	float dH[9];
	float dMax = 0.0;
	float dcostMin = 100000.0;
	float dEst = 1000.0;
	int countFail = 0;

	for(int di=0; di< nDepth ; di++)     //depth
	{                   
    	float dval = qmin + di*step;
    	
    	for(int i = 0; i<9; i++)
			dH[i] = P[i] + dval * B[i];
			
		float val = 0.0;
		int patch_sz = (2*order + 1)*(2*order + 1);
		int fail = 0;
		int countPass = 0;
		for(int patch_x = -1*order; patch_x <= order; patch_x++)
		{
			for(int patch_y = -1*order; patch_y <= order; patch_y++)
			{
				int nxIndex = xIndex + patch_x;
				int nyIndex = yIndex + patch_y;
				float u = dH[0] * (float)nyIndex + dH[1] * (float)nxIndex + dH[2];
				float v = dH[3] * (float)nyIndex + dH[4] * (float)nxIndex + dH[5];
				float w = dH[6] * (float)nyIndex + dH[7] * (float)nxIndex + dH[8];
				float neiImgCost = 0.0f;
   				if(w>0 || w <0)
    			{
    				float neiIdx_y = u/w,neiIdx_x = v/w;
      				if(neiIdx_y > height || neiIdx_x > width || neiIdx_y < 0 || neiIdx_x < 0)
      					neiImgCost = 0;
      				else{
        				neiImgCost = abs(tex2D(tex_Im, neiIdx_x, neiIdx_y) - tex2D(tex_Im, nxIndex, nyIndex));
        				fail = 255;
        				countPass++;
        			}
    			}
    	    
				val += neiImgCost;    //L1  
		    }
		}
		if(countPass>(2*order+1))
			val = val/float(countPass) ;
		else{
		    fail = 0;
		}
		if(dcostMin > val)
		{
			dcostMin = val;
	      	dEst = 1.0/dval;					//we have to take minimum depth
	    }
		
		dCost[ di*height*width + yIndex*width + xIndex ]=val;
		dMax = max(dMax , val);
		dSum = dSum + val;
		dBorderFlag[ yIndex*width + xIndex ] = fail;
	}
	
	delete[] dH;
}



void function(Mat& Ir,Mat& Im,Mat& R,Mat& T,Mat& Nv,Mat& K,Mat& Ki,Mat& confMat, Mat &borderFlag, Mat &IrEstDepth, int height, int width,int order,float dMin,float stepSz, int nDepth)
{
	Mat qmat=Mat::zeros(height,width,CV_32FC1);
	float *dIr;
	float *dIm;
	float *dCost;
	float *dest;
	float *dP;
	float *dB;
	float *dConf;
	int *dBorderFlag;
	int maxOrd=order;

	float tPx = height*width;
	const int imgSz = Ir.step*Ir.rows;

	cudaMalloc((void **)&dIr, imgSz);
	cudaMalloc((void **)&dIm, imgSz);
	cudaMalloc((void **)&dCost, 400*tPx*sizeof(float));
	cudaMalloc((void **)&dConf, tPx*sizeof(float));
	cudaMalloc((void **)&dest, tPx*sizeof(float));
	cudaMalloc((void **)&dP, 3*3*sizeof(float));
	cudaMalloc((void **)&dB, 3*3*sizeof(float));
	cudaMalloc((void **)&dBorderFlag, height*width*sizeof(int));

	SAFE_CALL(cudaMemcpy(dIr,Ir.ptr(),imgSz,cudaMemcpyHostToDevice),"CUDA Memcpy Host To Device Failed");
	SAFE_CALL(cudaMemcpy(dIm,Im.ptr(),imgSz,cudaMemcpyHostToDevice),"CUDA Memcpy Host To Device Failed");
	dim3 blSz(8,32,1);
	dim3 thSz(nDepth/blSz.x, (tPx)/blSz.y, 1);
	printf("Device Variable Copying:\t%s\n", cudaGetErrorString(cudaGetLastError()));
	dim3 blockSize(16, 16, 1);
	dim3 gridSize((Ir.cols)/blockSize.x, (Ir.rows)/blockSize.y, 1);
	Mat A = T*Nv;
	Mat P = K * R * Ki;
	Mat B = K * A * Ki;
	cudaMemcpy(dP, P.ptr(), 3*3*sizeof(float), cudaMemcpyHostToDevice);
	cudaMemcpy(dB, B.ptr(), 3*3*sizeof(float), cudaMemcpyHostToDevice);
    
	size_t pitch;
	float* d_texture; //Device texture
	
	//Allocate pitch linear memory to device texture table	
	cudaMallocPitch((void**)&d_texture,&pitch, width * sizeof(float), height);
	
	//Use Memcpy2D as the pitch of host and device memory may be different
	cudaMemcpy2D(d_texture, pitch, Im.ptr(), width * sizeof(float), width *sizeof(float), height, cudaMemcpyHostToDevice); 
	cudaBindTexture2D(NULL, tex_Im, d_texture, tex_Im.channelDesc, width, height, pitch) ;
	
	costVolume<<<gridSize,blockSize>>>(dIr, dBorderFlag, dCost, dConf, dest, dP, dB, height, width , maxOrd, nDepth);

	cudaUnbindTexture(tex_Im);
	cudaFree(d_texture);
	cudaFree(dIr);
	cudaFree(dIm);
	cudaMemcpy(confMat.ptr(), dConf, imgSz, cudaMemcpyDeviceToHost);
	cudaMemcpy(borderFlag.ptr(), dBorderFlag, height*width*sizeof(int), cudaMemcpyDeviceToHost);
	cudaMemcpy(IrEstDepth.ptr(), dest, imgSz, cudaMemcpyDeviceToHost);
	printf("Device Variable Copying:\t%s\n", cudaGetErrorString(cudaGetLastError()));
	//printf("%f\n",IrEstDepth.at<float>(100,100));
	double minE, maxE;
	cv::minMaxLoc(confMat, &minE, &maxE);
	cout<<"Confidence "<<minE<<' '<<maxE<<endl;
}
